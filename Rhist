# R history dated - 1 sep, 2011
htgt<-read.csv('htgtTab.csv')
str(htgt)
sym<-htgt$MARKER_SYMBOL
symIndex=which(duplicated(sym,incomparables=FALSE,MARGIN=1)==FALSE)
length(symIndex)
genes<-unique(sym)
sym[tail(symIndex)]==tail(genes)
symIndex
genes
symIndex[length(symIndex)+1]
epdWells<-diff(symIndex)
length(epdWells)
length(symIndex)
length(symIndex)+1
length(sym)
symIndex[length(symIndex)]
symIndex[length(symIndex)+1]=length(tab$MARKER_SYMBOL)
symIndex[length(symIndex)+1]=length(sym)
symIndex[length(symIndex)+1]
symIndex[length(symIndex)]
for (i in 1:length(genes)){return(which(sym==genes[i]))}
for (i in 1:length(genes)){print (which(sym==genes[i]))}
for (i in 1:length(genes)){a=which(sym==genes[i])}
a
for (i in 1:length(genes)){a[[i]]=which(sym==genes[i])}
a<-list()
for (i in 1:length(genes)){a[[i]]=which(sym==genes[i])}
a
unique(diff(unlist(a)))
symIndex[1:10]
tt<-list();epd<-list()
for (i in 1:length(genes)){
epd[[i]]=which(htgt$EPD_DISTRIBUTE[which(sym==genes[i])]=='yes')
tt[[i]]=which(htgt$TARGETED_TRAP[which(sym==genes[i])]=='yes')
print (paste(length(genes)-i,"lest"))
}
epd
tt
tt
lapply(tt,count)
lapply(count,tt)
lapply(length,tt)
lapply(tt,length)
unlist(lapply(tt,length))
tt<-list();epd<-list()
for (i in 1:length(genes)){
epd[[i]]=which(htgt$EPD_DISTRIBUTE[which(sym==genes[i])]=='yes')
tt[[i]]=which(htgt$TARGETED_TRAP[which(sym==genes[i])]=='yes')
print (paste(length(genes)-i,"left"))
}
tt
tt<-list();epd<-list()
for (i in 1:length(genes)){
epd[[i]]=which(htgt$EPD_DISTRIBUTE[which(sym==genes[i])]=='yes')
tt[[i]]=which(htgt$TARGETED_TRAP[which(sym==genes[i])]=='yes')
print (paste(length(genes)-i,"left"))
}
ls
ls()
epd
a<-read.csv('workspace/ikmc_targeting_efficiencies/a.csv')
a
htgtParsed<-read.csv('workspace/ikmc_targeting_efficiencies/htgtParsed.csv')
htgtParsed[1:50,]
colnames(htgtParsed)
htgtParsed<-read.csv('workspace/ikmc_targeting_efficiencies/htgtParsed.csv',header=TRUE)
htgtParsed[1:50,]
htgtParsed<-read.csv('workspace/ikmc_targeting_efficiencies/htgtParsed.csv',header=FALSE)
htgtParsed[1:50,]
length(htgtParsed$V1)
colnames(htgtParsed)
colnames(htgtParsed)=c("genes","epWellNames","epdWellNames","epdDistributes","targetedTraps","geneTraps")
length(unique(htgtParsed$epWellNames))
duplicated(htgtParsed$epWellNames)
htgtParsed$epWellNames[1:10]
duplicated(htgtParsed$epWellNames[1:100])
duplicated(htgtParsed$epWellNames[1:1000])
which(duplicated(htgtParsed$epWellNames[1:1000])==TRUE)
which(duplicated(htgtParsed$epWellNames[1:1000])==FALSE)
ht<-htgtParsed
ls()
ht
ls()
rm(i)
epClubs<-read.csv("workspace/ikmc_targeting_efficiencies/epClubs.csv")
epClubs<-read.table("workspace/ikmc_targeting_efficiencies/epClubs.csv")
epClubs
str(epClubs)
epClubs[1:20,]
sort(epClubs)
sort(epClubs,by=MARKER_SYMBOL)
?order
rownames(epClubs)
rownames(epClubs$V1)
rownames(epClubs$V2)
colnames(epClubs)
epClubs<-read.table("workspace/ikmc_targeting_efficiencies/epClubs.csv",col.names=TRUE)
epClubs<-read.table("workspace/ikmc_targeting_efficiencies/epClubs.csv",header=T)
colnames(epClubs)
order(epClubs)
length(epClubs)
length(epClubs$MARKER_SYMBOL)
?order
order(epClubs$MARKER_SYMBOL[1:10])
order(epClubs$MARKER_SYMBOL[1:10])
epClubs$MARKER_SYMBOL[1:10]
order(as.character(epClubs$MARKER_SYMBOL[1:10]))
order(epClubs,by=x)
order(epClubs,by=MARKER_SYMBOL)
order(epClubs,by=MARKER_SYMBOL)
order(epClubs,by=epClubs$MARKER_SYMBOL)
epClubs[order(epClubs$MARKER_SYMBOL[1:5])]
epClubs[order(epClubs$MARKER_SYMBOL)][1:5,]
epClubs[order(epClubs$MARKER_SYMBOL)][1:5]
epClubs[order(epClubs$MARKER_SYMBOL)]
order(epClubs$MARKER_SYMBOL)
epClubs[order(epClubs$MARKER_SYMBOL)[1:10],]
epClubs[order(epClubs$MARKER_SYMBOL)[1:100],]
epClubs[order(epClubs$MARKER_SYMBOL)[1:10],]
epClubs[order(epClubs$MARKER_SYMBOL)[1:20],]
epClubs[order(epClubs$MARKER_SYMBOL)[1:30],]
epClubsSorted=epClubs[order(epClubs$MARKER_SYMBOL),]
epClubsSorted$MARKER_SYMBOL[1:100]
tail(epClubsSorted$MARKER_SYMBOL)
tail(epClubsSorted$MARKER_SYMBOL)
epClubs[1,]
which(epClubsSorted$MARKER_SYMBOL="Itm2a")
which(epClubsSorted$MARKER_SYMBOL=="Itm2a")
epClubsSorted[which(epClubsSorted$MARKER_SYMBOL=="Itm2a")]
epClubsSorted[which(epClubsSorted$MARKER_SYMBOL=="Itm2a"),]
cor.test
ep=epClubsSorted
colnames(ep)
cor(epClubs$TARGETED_TRAP,epClubs$MGI_GT_COUNT)
epClubs$TARGETED_TRAP[1]
cor(epClubs$TARGETED_TRAP[1],epClubs$MGI_GT_COUNT[1])
cor(epClubs$TARGETED_TRAP[1:10],epClubs$MGI_GT_COUNT[1:10])
cor(epClubs$TARGETED_TRAP[1:100],epClubs$MGI_GT_COUNT[1:100])
#plot(x.var, y.var, xlab="x-label", ylab="y-label", pch=21))
plot(ep$TARGETED_TRAP,ep$MGI_GT_COUNT)
abline(lm(ep$MGI_GT_COUNT,ep$TARGETED_TRAP))
abline(lm(ep$MGI_GT_COUNT,ep$TARGETED_TRAP)
fractionAge<-function(x,y,z){return((x+y)/z)}
fractionAge(ep$EPD_DISTRIBUTE,ep$TARGETED_TRAP,ep$EPD_WELL_NAME)
fractionAge(ep$EPD_DISTRIBUTE,ep$TARGETED_TRAP,ep$EPD_WELL_NAME)[1:10]
ep[1,]
14/32
ep[2,]
29/64
ep[length(ep$TARGETED_TRAP),]
fractionAge(ep$EPD_DISTRIBUTE,ep$TARGETED_TRAP,ep$EPD_WELL_NAME)[length(ep$TARGETED_TRAP)]
27/61
cbind(fractionAge(ep$EPD_DISTRIBUTE,ep$TARGETED_TRAP,ep$EPD_WELL_NAME)[length(ep$TARGETED_TRAP)])
cbind(fractionAge(ep$EPD_DISTRIBUTE,ep$TARGETED_TRAP,ep$EPD_WELL_NAME))
data.frame(ep,cbind(fractionAge(ep$EPD_DISTRIBUTE,ep$TARGETED_TRAP,ep$EPD_WELL_NAME))[1:10,])
data.frame(ep,cbind(fractionAge(ep$EPD_DISTRIBUTE,ep$TARGETED_TRAP,ep$EPD_WELL_NAME))[1:10])
data.frame(ep,cbind(fractionAge(ep$EPD_DISTRIBUTE,ep$TARGETED_TRAP,ep$EPD_WELL_NAME))[1:10,])
data.frame(ep,fractionAge(ep$EPD_DISTRIBUTE,ep$TARGETED_TRAP,ep$EPD_WELL_NAME)[1:10])
data.frame(ep,fractionAge(ep$EPD_DISTRIBUTE,ep$TARGETED_TRAP,ep$EPD_WELL_NAME))[1:10]
data.frame(ep,fractionAge(ep$EPD_DISTRIBUTE,ep$TARGETED_TRAP,ep$EPD_WELL_NAME))
data.frame(ep,fractionAge(ep$EPD_DISTRIBUTE,ep$TARGETED_TRAP,ep$EPD_WELL_NAME))[1:10,]
data.frame(ep,fractionAge(ep$EPD_DISTRIBUTE,ep$TARGETED_TRAP,ep$EPD_WELL_NAME))[1:10,]
data.frame(ep,fractionAge=fractionAge(ep$EPD_DISTRIBUTE,ep$TARGETED_TRAP,ep$EPD_WELL_NAME))
epF=data.frame(ep,fractionAge=fractionAge(ep$EPD_DISTRIBUTE,ep$TARGETED_TRAP,ep$EPD_WELL_NAME))
epF
epf
epF[1:10,]
epF=data.frame(ep,fractionAge(234234/2323)=fractionAge(ep$EPD_DISTRIBUTE,ep$TARGETED_TRAP,ep$EPD_WELL_NAME))
epF=data.frame(ep,fractionAge"(234234/2323)"=fractionAge(ep$EPD_DISTRIBUTE,ep$TARGETED_TRAP,ep$EPD_WELL_NAME))
epF=data.frame(ep,fractionAge=fractionAge(ep$EPD_DISTRIBUTE,ep$TARGETED_TRAP,ep$EPD_WELL_NAME))
epF
epF[1:20,]
epF=data.frame(ep,fractionAge=round(fractionAge(ep$EPD_DISTRIBUTE,ep$TARGETED_TRAP,ep$EPD_WELL_NAME),digits=3))
epF[1:20,]
which(is.na(epF$fractionAge)=T)
length(which(is.na(epF$fractionAge)==T))
length(which(epF$fractionAge=='1'))
length(epF$fractionAge)
length(which(is.na(epF$fractionAge)==T))
length(which(is.null(epF$fractionAge)==T))
length(which(is.na(epF$fractionAge)==T))
which(is.null(epF$MGI_GT_COUNT)==T)
which(is.na(epF$MGI_GT_COUNT)==T)
which(is.null(epF$fractionAge)==T)
length(ep$MGI_GT_COUNT)
which(is.na(ep$MGI_GT_COUNT)==TRUE)
which(is.null(ep$MGI_GT_COUNT)==TRUE)
epF[1:100,]
geneClubs<-read.table('workspace/ikmc_targeting_efficiencies/tables/geneClubs.csv',header=T)
geneClubs[1:100,]
geneClubs[1:100,]
geneClubs<-read.csv('workspace/ikmc_targeting_efficiencies/tables/geneClubs.csv')
geneClubs[1:100,]
geneClubs<-read.csv('workspace/ikmc_targeting_efficiencies/tables/geneClubs.csv',header=T)
geneClubs[1:100,]
geneClubs<-read.csv('workspace/ikmc_targeting_efficiencies/tables/geneClubs.csv',header=F)
geneClubs[1:100,]
#geneClubs<-read.csv('workspace/ikmc_targeting_efficiencies/tables/geneClubs.csv',header=F)
which(ep$MARKER_SYMBOL="ccdc55")
which(ep$MARKER_SYMBOL=="Ccdc55")
ep[2269,]
#cor()
length(epF$EPD_DISTRIBUTE)
length(which(is.na(epF$MGI_GT_COUNT==0)))
length(which(epF$MGI_GT_COUNT==0))
which(is.na(epF$EPD_DISTRIBUTE))
which(is.na(epF$EPD_WELL_NAME))
which(is.na(epF$MGI_GT_COUNT))
which(is.na(epF$fractionAge))
fractionAge
length(which(epF$EPD_DISTRIBUTE==0))
length(which(epF$EPD_WELL_NAME==0))
unique(epF$MGI_GT_COUNT)
min(unique(epF$MGI_GT_COUNT))
which(epF$MGI_GT_COUNT==0)
length(which(epF$MGI_GT_COUNT==0))
cor(epF$MGI_GT_COUNT,epF$fractionAge)
unique(epF$MGI_GT_COUNT)
sum(unique(epF$MGI_GT_COUNT))
sum(unique(epF$fractionAge))
epF$fractionAge
which(epF$fractionAge=NaN)
which(epF$fractionAge==NaN)
which(epF$fractionAge=="NaN")
epF$fractionAge[which(epF$fractionAge=="NaN")]
epF$fractionAge[which(epF$fractionAge=="NaN")]=0
epF$fractionAge[which(epF$fractionAge=="NaN")]
cor(epF$MGI_GT_COUNT,epF$fractionAge)
# plots geneTrapsvsEP_fullGTcounts.jpeg
plot(epF$MGI_GT_COUNT,epF$fractionAge,xlab="gene trap count",ylab="fractions of electroporations")
cor(epF$MGI_GT_COUNT,epF$fractionAge)
plot(epF$MGI_GT_COUNT,epF$fractionAge,xlab="gene trap count",ylab="fractions of electroporations",sub=paste("Correlation=",cor(epF$MGI_GT_COUNT,epF$fractionAge)))
plot(epF$MGI_GT_COUNT,epF$fractionAge,xlab="gene trap count",ylab="fractions of electroporations",sub=paste("Correlation=",round(cor(epF$MGI_GT_COUNT,epF$fractionAge),digits=3)))
plot(epF$MGI_GT_COUNT)
hist(epF$MGI_GT_COUNT)
#hist(epF$MGI_GT_COUNT,)
?hist
hist(epF$MGI_GT_COUNT,breaks=2)
hist(epF$MGI_GT_COUNT,breaks=1)
hist(epF$MGI_GT_COUNT,breaks=100)
hist(epF$MGI_GT_COUNT,breaks=1000)
hist(epF$MGI_GT_COUNT,breaks=1000,xlim=c(1,200))
hist(epF$MGI_GT_COUNT,breaks=1000,xlim=c(1,2))
hist(epF$MGI_GT_COUNT,breaks=1000,xlim=c(1,20))
hist(epF$MGI_GT_COUNT,breaks=seq(min(epF$MGI_GT_COUNT),max(epF$MGI_GT_COUNT)))
hist(epF$MGI_GT_COUNT,breaks=seq(min(epF$MGI_GT_COUNT),max(epF$MGI_GT_COUNT),length=50))
hist(epF$MGI_GT_COUNT,breaks=seq(min(epF$MGI_GT_COUNT),max(epF$MGI_GT_COUNT))
hist(epF$MGI_GT_COUNT,breaks=seq(min(epF$MGI_GT_COUNT),max(epF$MGI_GT_COUNT)))
hist(epF$MGI_GT_COUNT,breaks=seq(min(epF$MGI_GT_COUNT),max(epF$MGI_GT_COUNT)),ylim=c(1,100))
hist(epF$MGI_GT_COUNT,breaks=seq(min(epF$MGI_GT_COUNT),max(epF$MGI_GT_COUNT)))
max(epF$MGI_GT_COUNT)
hist(epF$MGI_GT_COUNT,breaks=seq(min(epF$MGI_GT_COUNT),max(epF$MGI_GT_COUNT)),ylim=c(1,100))
hist(epF$MGI_GT_COUNT,breaks=seq(min(epF$MGI_GT_COUNT),max(epF$MGI_GT_COUNT)),ylim=c(1,200))
hist(epF$MGI_GT_COUNT,breaks=seq(min(epF$MGI_GT_COUNT),max(epF$MGI_GT_COUNT)),ylim=c(1,200),ylab="Gene traps")
hist(epF$MGI_GT_COUNT,breaks=seq(min(epF$MGI_GT_COUNT),max(epF$MGI_GT_COUNT)),ylim=c(1,200),xlab="Gene traps")
hist(epF$MGI_GT_COUNT,breaks=seq(min(epF$MGI_GT_COUNT),max(epF$MGI_GT_COUNT)),ylim=c(1,200),xlab="Gene traps",xlim=c(1,200))
hist(epF$MGI_GT_COUNT,breaks=seq(min(epF$MGI_GT_COUNT),max(epF$MGI_GT_COUNT)),ylim=c(1,200),xlab="Gene traps")
hist(epF$MGI_GT_COUNT,breaks=seq(min(epF$MGI_GT_COUNT),max(epF$MGI_GT_COUNT)),ylim=c(1,500),xlab="Gene traps")
hist(epF$MGI_GT_COUNT,breaks=seq(min(epF$MGI_GT_COUNT),max(epF$MGI_GT_COUNT)),ylim=c(1,1000),xlab="Gene traps")
hist(epF$MGI_GT_COUNT,breaks=seq(min(epF$MGI_GT_COUNT),max(epF$MGI_GT_COUNT)),ylim=c(1,1000),xlab="Gene traps",xlim=c(1,50))
hist(epF$MGI_GT_COUNT,breaks=seq(min(epF$MGI_GT_COUNT),max(epF$MGI_GT_COUNT)),ylim=c(1,1500),xlab="Gene traps",xlim=c(1,50))
hist(epF$MGI_GT_COUNT,breaks=seq(min(epF$MGI_GT_COUNT),max(epF$MGI_GT_COUNT)),ylim=c(1,15000),xlab="Gene traps",xlim=c(1,50))
length(which(epF$MGI_GT_COUNT=='1'))
length(which(epF$MGI_GT_COUNT=='0'))
length(which(epF$MGI_GT_COUNT=='2'))
unique(epF$MGI_GT_COUNT)
sort(unique(epF$MGI_GT_COUNT))
sort(unique(epF$MGI_GT_COUNT))
hist(log2(epF$MGI_GT_COUNT),breaks=seq(min(epF$MGI_GT_COUNT),max(epF$MGI_GT_COUNT)),ylim=c(1,15000),xlab="Gene traps",xlim=c(1,50))
hist(log2(epF$MGI_GT_COUNT),breaks=seq(min(epF$MGI_GT_COUNT),max(epF$MGI_GT_COUNT)),ylim=c(1,500),xlab="Gene traps",xlim=c(1,50))
hist(log2(epF$MGI_GT_COUNT),breaks=seq(min(epF$MGI_GT_COUNT),max(epF$MGI_GT_COUNT)),ylim=c(1,500),xlab="Gene traps",xlim=c(1,500))
hist(log2(epF$MGI_GT_COUNT),breaks=seq(min(epF$MGI_GT_COUNT),max(epF$MGI_GT_COUNT)),ylim=c(1,500),xlab="Gene traps",xlim=c(1,5000))
hist(log2(epF$MGI_GT_COUNT),breaks=seq(min(epF$MGI_GT_COUNT),max(epF$MGI_GT_COUNT)),ylim=c(1,500),xlab="Gene traps",xlim=c(1,500))
hist(log2(epF$MGI_GT_COUNT),breaks=seq(min(epF$MGI_GT_COUNT),max(epF$MGI_GT_COUNT)),ylim=c(1,5000),xlab="Gene traps",xlim=c(1,500))
hist(log2(epF$MGI_GT_COUNT),breaks=seq(min(epF$MGI_GT_COUNT),max(epF$MGI_GT_COUNT)),ylim=c(1,5000),xlab="Gene traps")
hist(log2(epF$MGI_GT_COUNT),breaks=seq(min(epF$MGI_GT_COUNT),max(epF$MGI_GT_COUNT)),ylim=c(1,5000),xlab="Gene traps",xlim=c(0,100))
log2(epF$MGI_GT_COUNT)[1:10]
epF$MGI_GT_COUNT
epF$MGI_GT_COUNT[1:10]
log2(epF$MGI_GT_COUNT)[1:10]
plot(epF$MGI_GT_COUNT,epF$fractionAge,xlab="gene trap count",ylab="fractions of electroporations",sub=paste("Correlation=",round(cor(epF$MGI_GT_COUNT,epF$fractionAge),digits=3)))
plot(epF$MGI_GT_COUNT,epF$fractionAge,xlab="gene trap count",ylab="fractions of electroporations",sub=paste("Correlation=",round(cor(epF$MGI_GT_COUNT,epF$fractionAge),digits=3)),xlim=c(0,150))
plot(epF$MGI_GT_COUNT,epF$fractionAge,xlab="gene trap count",ylab="fractions of electroporations",sub=paste("Correlation=",round(cor(epF$MGI_GT_COUNT,epF$fractionAge),digits=3)),xlim=c(0,50))
epF$EP_PLATE_NAME[1:10]
geneClubs=read.table('workspace/ikmc_targeting_efficiencies/tables/geneClubs.csv',header=T)
geneClubs$EPD_WELL_NAME[1:10]
geneClubs$EP_PLATE_NAME[1:10]
length(unique(geneClubs$EP_PLATE_NAME[1:10]))
(unique(geneClubs$EP_PLATE_NAME[1:10])
unique(geneClubs$EP_PLATE_NAME[1:10])
length(unique(geneClubs$EP_PLATE_NAME))
length(geneClubs$EP_PLATE_NAME)
unique(geneClubs$EP_PLATE_NAME)[1:10]
geneEPref=unique(geneClubs$EP_PLATE_NAME)[1:10]
k=a(geneEPref,geneClubs$EP_PLATE_NAME)
a<-function(x,y){return(which(x==y))}
k=a(geneEPref,geneClubs$EP_PLATE_NAME)
k
mapply(a,geneEPref,geneClubs$EP_PLATE_NAME)
#mapply(a,geneEPref,geneClubs$EP_PLATE_NAME)
c=mapply(a,geneEPref,geneClubs$EP_PLATE_NAME)
c
co=mapply(a,geneEPref,geneClubs$EP_PLATE_NAME)
co
co=mapply(a,geneEPref,geneClubs$EP_PLATE_NAME)
co
#co=mapply(a,geneEPref,geneClubs$EP_PLATE_NAME)
geneEPref[1:10]
geneClubs$EP_PLATE_NAME[1:10]
length(geneEPref)
length(geneEPref)
geneEPref=unique(geneClubs$EP_PLATE_NAME)
length(geneEPref)
length(geneClubs$EP_PLATE_NAME)
unique(geneClubs$EP_PLATE_NAME)[1:100]
which(unique(geneClubs$EP_PLATE_NAME)[1:100])
which(duplicated(geneClubs$EP_PLATE_NAME)[1:100])
which(duplicated(geneClubs$EP_PLATE_NAME)[1:1000)
which(duplicated(geneClubs$EP_PLATE_NAME)[1:1000]
)
frequency(unique(geneClubs$EP_PLATE_NAME)[1:100])
frequency(unique(geneClubs$EP_PLATE_NAME)[1:1000])
sum(number==geneClubs$EP_PLATE_NAME[1:100])
sum(numbers==geneClubs$EP_PLATE_NAME[1:100])
table(geneClubs$EP_PLATE_NAME[1:100])
table(geneClubs$EP_PLATE_NAME)
#table(geneClubs$EP_PLATE_NAME,)
match(geneEPref,geneClubs$EP_PLATE_NAME)
match(geneEPref[1],geneClubs$EP_PLATE_NAME)
match(geneEPref[10],geneClubs$EP_PLATE_NAME)
match(geneEPref[100],geneClubs$EP_PLATE_NAME)
geneEPref[100]
which(geneClubs$EP_PLATE_NAME==geneEPref[100])
mapply(match,geneEPref[100],geneClubs$EP_PLATE_NAME)
mapply(match,geneEPref[100:101],geneClubs$EP_PLATE_NAME[1:1000])
mapply(match,geneEPref[1:2],geneClubs$EP_PLATE_NAME[1:1000])
#mapply(match,xyed=function(x,y){return(mapply(match,x,y))},geneClubs$EP_PLATE_NAME[1:1000])
yed=function(x,y){return(mapply(match,x,y))}
yed(geneEPref[1],geneClubs$EP_PLATE_NAME[1:1000])
which(geneClubs$EP_PLATE_NAME[1:1000]==geneEPref[1])
yed(geneEPref[1],geneClubs$EP_PLATE_NAME[1:1000])
yed=function(x){return(mapply(match,x,geneClubs$EP_PLATE_NAME[1:1000]))}
red=function(x){return(yed(x))}
yed(geneEPref[1])
lapply(red,geneEPref[1:5])
lapply(geneEPref[1:5],red)
yed=function(x){return(which(mapply(match,x,geneClubs$EP_PLATE_NAME[1:1000]))=='1',arr.ind=TRUE)}
yed=function(x){return(which(mapply(match,x,geneClubs$EP_PLATE_NAME))=='1',arr.ind=TRUE)}
yed(geneEPref[1])
#mapply(match,x,geneClubs$EP_PLATE_NAME)
yed=function(x){return(which((mapply(match,x,geneClubs$EP_PLATE_NAME))=='1',arr.ind=TRUE))}.
yed=function(x){return(which((mapply(match,x,geneClubs$EP_PLATE_NAME))=='1',arr.ind=TRUE))}
yed(geneEPref[1])
lapply(geneEPref[1:5],red)
geneEPref[1:5]
table(geneClubs$EP_PLATE_NAME)
kita=table(geneClubs$EP_PLATE_NAME)
kita[1]
kita@.S3Class
kita@.S3Class[1]
repeat(geneEPref)
repeat(geneClubs$EP_PLATE_NAME])
repeat(geneClubs$EP_PLATE_NAME[1:10])
?repeat
?repeat
plot(table(geneClubs$EP_PLATE_NAME))
length(table(geneClubs$EP_PLATE_NAME))
length(epF$fractionAge)
length(geneClubs)
length(geneClubs$EPD_DISTRIBUTE)
geneClubs[1:10,]
foreach
table(geneClubs[1:10,])
table(geneClubs[1:10,1])
table(geneClubs[1:10,1],geneClubs[1:10,2])
geneClubs[1:10,1]
geneClubs[1:10,2]
summary(geneClubs[1:10,])
summary(geneClubs[1:10,])
summary(geneClubs[1:100,])
o=summary(geneClubs[1:100,])
o@.S3Class
o
o[1]
table(geneEPref[1:10])
table(geneEPref)
table(geneEPref[1:10],geneClubs$EP_PLATE_NAME)
table(geneEPref[1:10],geneClubs$EP_PLATE_NAME[1:10])
table(geneEPref[1:10],geneClubs$EP_PLATE_NAME[1])
table(geneEPref[1],geneClubs$EP_PLATE_NAME[1])
o=table(geneEPref[1],geneClubs$EP_PLATE_NAME[1])
str(o)
o[1]
o[1:10]
o[1:100]
unique(o)
which(o=='1')
length(geneClubs$EP_PLATE_NAME)
o[1302140]
o[1302140:1302160]
length(o)
#o=table(geneEPref[1],geneClubs$EP_PLATE_NAME[1])
l=geneClubs$EP_PLATE_NAME[1]
l
o=table(geneEPref[1],l)
o
k=geneEPref[1]
table(l,k)
levels(k)
levels(k)=k
levels(k)=''
subset(geneClubs,!duplicated(geneEPref))
k=subset(geneClubs,!duplicated(geneEPref))
str(k)
k=subset(geneClubs$EP_PLATE_NAME,!duplicated(geneEPref))
str(k)
k=subset(geneClubs$EP_PLATE_NAME,duplicated(geneEPref))
str(k)
k=subset(duplicated(geneClubs$EP_PLATE_NAME))
k=subset(geneEPref,duplicated(geneClubs$EP_PLATE_NAME))
str(k)
k
unique(k)
k=with(subset(geneEPref,duplicated(geneClubs$EP_PLATE_NAME)))
k=with(subset(geneEPref,duplicated(geneClubs$EP_PLATE_NAME)),table(geneEPref))
savehistory(file='Rhist')
